use org.openflexo.ta.opcua.OPCServerModelSlot as OPCUA;

import org.openflexo.ta.opcua.model.OPCServer;
import org.openflexo.ta.opcua.model.OPCNamespace;
import org.openflexo.ta.opcua.model.nodes.OPCNode;

@URI("http://openflexo.org/opc-ua-test/MinimalServer.fml")
@Author("sylvainguerin")
public model MinimalServer {
	OPCServer opcServer with OPCServerModelSlot();

   create(Resource<OPCServer> connexion) {
      opcServer = parameters.connexion.resourceData;
      log "c'est parti pour la synchro";
      this.synchronize();
   }

   public synchronize() {
	  log "calcul du MatchingSet";
      MatchingSet<Namespace> matchingSet = begin match Namespace from this;
      log "matchingSet=" + matchingSet;
      for (OPCNamespace ns : opcServer.namespaces) {
          log " >>> " + ns.uri;
          match Namespace 
               in matchingSet from this 
               where (opcNamespace=ns) create::init(ns);
      }
      end match Namespace in matchingSet delete::performDelete();
   }

   public debug() {
      log "Found namespaces : " + opcServer.namespaces;
      for (OPCNamespace ns : opcServer.namespaces) {
          log " OPCNamespace " + ns.uri;
          for (OPCNode node : ns.getAllNodes()) {
            log "   > " + node.qualifiedName;
          }
      }
   }

   concept Namespace {
	   OPCNamespace opcNamespace with OPCNamespaceRole(container=opcServer);

      create::init(OPCNamespace ns) {
         opcNamespace = parameters.ns;
      }

      delete::performDelete() {
      }

      public synchronize() {
         MatchingSet<Node> matchingSet = begin match Node from this;
         for (OPCNode node : opcNamespace.allNodes) {
            log " --- " + node.qualifiedName;
            match Node 
               in matchingSet from this 
               where (opcNode=node) create::init(node);
         }
         end match Node in matchingSet delete::performDelete();
      }

      concept Node {
         OPCNode opcNode with OPCNodeRole(container=opcServer);

         create::init(OPCNode n) {
            opcNode = parameters.n;
         }

         delete::performDelete() {
         }

	      public void retrieveValue() {	
            OPCUA::GetValue() in opcNode;
         }

      }

   }

 }
